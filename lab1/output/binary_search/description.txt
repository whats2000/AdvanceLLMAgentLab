-----Description-----
Implement a function in Lean 4 that performs a binary search on a sorted array (represented as a `List Int`) to locate a specific target integer. The binary search algorithm efficiently searches a sorted array by repeatedly dividing the search interval in half.  The function should adhere to standard binary search logic, adjusting the lower and upper bounds of the search space based on comparisons between the target and the middle element of the current interval. If the target is found, the function should return its index within the list. If the target is not present in the list, the function should return -1. The list is assumed to be sorted in ascending order. We will be implementing a recursive version of the binary search algorithm.

-----Input-----
The function will take two inputs:
1.  `array`: A `List Int` representing the sorted array of integers to be searched.  It is guaranteed that the input list will be sorted in ascending order.
2.  `target`: An `Int` representing the integer value to be searched for within the `array`.

-----Output-----
The function should return an `Int`:
*   If the `target` integer is found within the `array`, the function returns the index (0-based) of the target's location in the `array`.
*   If the `target` integer is not found within the `array`, the function returns -1.
