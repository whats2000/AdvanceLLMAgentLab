## Valid Parentheses

Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.
3. Every close bracket has a corresponding open bracket of the same type.

### Examples:

**Example 1:**
```
Input: s = "()"
Output: true
```

**Example 2:**
```
Input: s = "()[]{}"
Output: true
```

**Example 3:**
```
Input: s = "(]"
Output: false
```

**Example 4:**
```
Input: s = "([)]"
Output: false
```

**Example 5:**
```
Input: s = "{[]}"
Output: true
```

### Constraints:
- 1 <= s.length <= 10^4
- `s` consists of parentheses only '()[]{}'

### Approach:
This problem can be efficiently solved using a stack data structure. We can iterate through each character of the string:
- If we encounter an opening bracket, we push it onto the stack.
- If we encounter a closing bracket, we check if the stack is empty (no matching opening bracket) or if the top of the stack doesn't match the current closing bracket. If either condition is true, the string is invalid.
- Otherwise, we pop the matching opening bracket from the stack and continue.
- After processing the entire string, if the stack is empty, the string is valid; otherwise, it is invalid.
